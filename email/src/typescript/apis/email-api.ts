/* tslint:disable */
/* eslint-disable */
/**
 * Email
 * Here you can find documentation and examples for Greenspark Impact API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CustomDomainDto } from '../models';
import { CustomDomainRequestBody } from '../models';
import { NotificationTemplateRequestDto } from '../models';
import { NotificationTemplateResponseDto } from '../models';
import { TestNotificationTemplateRequestDto } from '../models';
/**
 * EmailApi - axios parameter creator
 * @export
 */
export const EmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add your domain and receive the DNS records that must be added to your domain.
         * @summary Add Domain
         * @param {CustomDomainRequestBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDomain: async (body: CustomDomainRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addDomain.');
            }
            const localVarPath = `/v1/email/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add your notification template for email sending. If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Add Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate: async (body: NotificationTemplateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addTemplate.');
            }
            const localVarPath = `/v1/email/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete your domain.
         * @summary Delete Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDomain: async (domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling deleteDomain.');
            }
            const localVarPath = `/v1/email/domains/{domainId}`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete your template.
         * @summary Delete Template
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId','Required parameter templateId was null or undefined when calling deleteTemplate.');
            }
            const localVarPath = `/v1/email/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch your previously added domains.
         * @summary Fetch Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDomains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/email/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch templates for email sending.
         * @summary Fetch Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTemplates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/email/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch templates defaults for email sending.
         * @summary Fetch Templates Defaults
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTemplatesDefaults: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/email/templates-defaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add your notification template for email sending.
         * @summary Test Template
         * @param {TestNotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testTemplate: async (body: TestNotificationTemplateRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling testTemplate.');
            }
            const localVarPath = `/v1/email/templates/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update your notification template for email sending.  If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Update Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: async (body: NotificationTemplateRequestDto, templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTemplate.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId','Required parameter templateId was null or undefined when calling updateTemplate.');
            }
            const localVarPath = `/v1/email/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify your domain based on the provided DNS records.
         * @summary Verify Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyDomain: async (domainId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'domainId' is not null or undefined
            if (domainId === null || domainId === undefined) {
                throw new RequiredError('domainId','Required parameter domainId was null or undefined when calling verifyDomain.');
            }
            const localVarPath = `/v1/email/domains/{domainId}/verify`
                .replace(`{${"domainId"}}`, encodeURIComponent(String(domainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailApi - functional programming interface
 * @export
 */
export const EmailApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add your domain and receive the DNS records that must be added to your domain.
         * @summary Add Domain
         * @param {CustomDomainRequestBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDomain(body: CustomDomainRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomDomainDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).addDomain(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add your notification template for email sending. If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Add Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTemplate(body: NotificationTemplateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NotificationTemplateResponseDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).addTemplate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete your domain.
         * @summary Delete Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(domainId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomDomainDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).deleteDomain(domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete your template.
         * @summary Delete Template
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NotificationTemplateResponseDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).deleteTemplate(templateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch your previously added domains.
         * @summary Fetch Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDomains(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CustomDomainDto>>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).fetchDomains(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch templates for email sending.
         * @summary Fetch Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTemplates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<NotificationTemplateResponseDto>>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).fetchTemplates(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch templates defaults for email sending.
         * @summary Fetch Templates Defaults
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTemplatesDefaults(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).fetchTemplatesDefaults(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add your notification template for email sending.
         * @summary Test Template
         * @param {TestNotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTemplate(body: TestNotificationTemplateRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).testTemplate(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update your notification template for email sending.  If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Update Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(body: NotificationTemplateRequestDto, templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<NotificationTemplateResponseDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).updateTemplate(body, templateId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Verify your domain based on the provided DNS records.
         * @summary Verify Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDomain(domainId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CustomDomainDto>>> {
            const localVarAxiosArgs = await EmailApiAxiosParamCreator(configuration).verifyDomain(domainId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EmailApi - factory interface
 * @export
 */
export const EmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add your domain and receive the DNS records that must be added to your domain.
         * @summary Add Domain
         * @param {CustomDomainRequestBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDomain(body: CustomDomainRequestBody, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomDomainDto>> {
            return EmailApiFp(configuration).addDomain(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Add your notification template for email sending. If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Add Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTemplate(body: NotificationTemplateRequestDto, options?: AxiosRequestConfig): Promise<AxiosResponse<NotificationTemplateResponseDto>> {
            return EmailApiFp(configuration).addTemplate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete your domain.
         * @summary Delete Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDomain(domainId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomDomainDto>> {
            return EmailApiFp(configuration).deleteDomain(domainId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete your template.
         * @summary Delete Template
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(templateId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<NotificationTemplateResponseDto>> {
            return EmailApiFp(configuration).deleteTemplate(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch your previously added domains.
         * @summary Fetch Domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDomains(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CustomDomainDto>>> {
            return EmailApiFp(configuration).fetchDomains(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch templates for email sending.
         * @summary Fetch Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTemplates(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<NotificationTemplateResponseDto>>> {
            return EmailApiFp(configuration).fetchTemplates(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch templates defaults for email sending.
         * @summary Fetch Templates Defaults
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTemplatesDefaults(options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return EmailApiFp(configuration).fetchTemplatesDefaults(options).then((request) => request(axios, basePath));
        },
        /**
         * Add your notification template for email sending.
         * @summary Test Template
         * @param {TestNotificationTemplateRequestDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testTemplate(body: TestNotificationTemplateRequestDto, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return EmailApiFp(configuration).testTemplate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update your notification template for email sending.  If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
         * @summary Update Template
         * @param {NotificationTemplateRequestDto} body 
         * @param {string} templateId The id of the notification template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplate(body: NotificationTemplateRequestDto, templateId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<NotificationTemplateResponseDto>> {
            return EmailApiFp(configuration).updateTemplate(body, templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify your domain based on the provided DNS records.
         * @summary Verify Domain
         * @param {string} domainId The id of the custom domain object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyDomain(domainId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CustomDomainDto>> {
            return EmailApiFp(configuration).verifyDomain(domainId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EmailApi - object-oriented interface
 * @export
 * @class EmailApi
 * @extends {BaseAPI}
 */
export class EmailApi extends BaseAPI {
    /**
     * Add your domain and receive the DNS records that must be added to your domain.
     * @summary Add Domain
     * @param {CustomDomainRequestBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async addDomain(body: CustomDomainRequestBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomDomainDto>> {
        return EmailApiFp(this.configuration).addDomain(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add your notification template for email sending. If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
     * @summary Add Template
     * @param {NotificationTemplateRequestDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async addTemplate(body: NotificationTemplateRequestDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<NotificationTemplateResponseDto>> {
        return EmailApiFp(this.configuration).addTemplate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete your domain.
     * @summary Delete Domain
     * @param {string} domainId The id of the custom domain object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async deleteDomain(domainId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomDomainDto>> {
        return EmailApiFp(this.configuration).deleteDomain(domainId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete your template.
     * @summary Delete Template
     * @param {string} templateId The id of the notification template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async deleteTemplate(templateId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<NotificationTemplateResponseDto>> {
        return EmailApiFp(this.configuration).deleteTemplate(templateId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch your previously added domains.
     * @summary Fetch Domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async fetchDomains(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CustomDomainDto>>> {
        return EmailApiFp(this.configuration).fetchDomains(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch templates for email sending.
     * @summary Fetch Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async fetchTemplates(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<NotificationTemplateResponseDto>>> {
        return EmailApiFp(this.configuration).fetchTemplates(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch templates defaults for email sending.
     * @summary Fetch Templates Defaults
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async fetchTemplatesDefaults(options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return EmailApiFp(this.configuration).fetchTemplatesDefaults(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add your notification template for email sending.
     * @summary Test Template
     * @param {TestNotificationTemplateRequestDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async testTemplate(body: TestNotificationTemplateRequestDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return EmailApiFp(this.configuration).testTemplate(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update your notification template for email sending.  If you do not want a customizable property to be custom, you should provide the default value for that property. You can get the default values for every template type from the templates-defaults endpoint.
     * @summary Update Template
     * @param {NotificationTemplateRequestDto} body 
     * @param {string} templateId The id of the notification template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async updateTemplate(body: NotificationTemplateRequestDto, templateId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<NotificationTemplateResponseDto>> {
        return EmailApiFp(this.configuration).updateTemplate(body, templateId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verify your domain based on the provided DNS records.
     * @summary Verify Domain
     * @param {string} domainId The id of the custom domain object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailApi
     */
    public async verifyDomain(domainId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CustomDomainDto>> {
        return EmailApiFp(this.configuration).verifyDomain(domainId, options).then((request) => request(this.axios, this.basePath));
    }
}
