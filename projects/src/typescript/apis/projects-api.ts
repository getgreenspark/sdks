/* tslint:disable */
/* eslint-disable */
/**
 * Projects
 * Here you can find documentation and examples for Greenspark Projects API
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Project } from '../models';
import { ProjectCategory } from '../models';
import { ProjectDetails } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch project by id
         * @summary Fetch project by id
         * @param {string} projectId The id of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling getProject.');
            }
            const localVarPath = `/v1/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch project categories
         * @summary Fetch project categories
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectCategories: async (type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/project-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch projects
         * @summary Fetch projects
         * @param {string} [country] Defines a country where the project is located.
         * @param {string} [projectCategoryId] Defines the category that the project falls under. It links the project to its relevant category.
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {number} [vintage] The year when the project started.
         * @param {string} [currency] The currency in which the project prices are returned. Returns in the account&#x27;s currency for an authenticated call, otherwise in USD if it&#x27;s not provided.
         * @param {string} [lng] The locale what the project is returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjects: async (country?: string, projectCategoryId?: string, type?: string, vintage?: number, currency?: string, lng?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication access-key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (projectCategoryId !== undefined) {
                localVarQueryParameter['projectCategoryId'] = projectCategoryId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (vintage !== undefined) {
                localVarQueryParameter['vintage'] = vintage;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetch project by id
         * @summary Fetch project by id
         * @param {string} projectId The id of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ProjectDetails>>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProject(projectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch project categories
         * @summary Fetch project categories
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectCategories(type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProjectCategory>>>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjectCategories(type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch projects
         * @summary Fetch projects
         * @param {string} [country] Defines a country where the project is located.
         * @param {string} [projectCategoryId] Defines the category that the project falls under. It links the project to its relevant category.
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {number} [vintage] The year when the project started.
         * @param {string} [currency] The currency in which the project prices are returned. Returns in the account&#x27;s currency for an authenticated call, otherwise in USD if it&#x27;s not provided.
         * @param {string} [lng] The locale what the project is returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(country?: string, projectCategoryId?: string, type?: string, vintage?: number, currency?: string, lng?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Project>>>> {
            const localVarAxiosArgs = await ProjectsApiAxiosParamCreator(configuration).getProjects(country, projectCategoryId, type, vintage, currency, lng, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetch project by id
         * @summary Fetch project by id
         * @param {string} projectId The id of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProject(projectId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<ProjectDetails>> {
            return ProjectsApiFp(configuration).getProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch project categories
         * @summary Fetch project categories
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectCategories(type?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProjectCategory>>> {
            return ProjectsApiFp(configuration).getProjectCategories(type, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch projects
         * @summary Fetch projects
         * @param {string} [country] Defines a country where the project is located.
         * @param {string} [projectCategoryId] Defines the category that the project falls under. It links the project to its relevant category.
         * @param {string} [type] The type of the impact which can by purchased by the project category.
         * @param {number} [vintage] The year when the project started.
         * @param {string} [currency] The currency in which the project prices are returned. Returns in the account&#x27;s currency for an authenticated call, otherwise in USD if it&#x27;s not provided.
         * @param {string} [lng] The locale what the project is returned in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjects(country?: string, projectCategoryId?: string, type?: string, vintage?: number, currency?: string, lng?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Project>>> {
            return ProjectsApiFp(configuration).getProjects(country, projectCategoryId, type, vintage, currency, lng, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI {
    /**
     * Fetch project by id
     * @summary Fetch project by id
     * @param {string} projectId The id of the project.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProject(projectId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<ProjectDetails>> {
        return ProjectsApiFp(this.configuration).getProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch project categories
     * @summary Fetch project categories
     * @param {string} [type] The type of the impact which can by purchased by the project category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProjectCategories(type?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProjectCategory>>> {
        return ProjectsApiFp(this.configuration).getProjectCategories(type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch projects
     * @summary Fetch projects
     * @param {string} [country] Defines a country where the project is located.
     * @param {string} [projectCategoryId] Defines the category that the project falls under. It links the project to its relevant category.
     * @param {string} [type] The type of the impact which can by purchased by the project category.
     * @param {number} [vintage] The year when the project started.
     * @param {string} [currency] The currency in which the project prices are returned. Returns in the account&#x27;s currency for an authenticated call, otherwise in USD if it&#x27;s not provided.
     * @param {string} [lng] The locale what the project is returned in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public async getProjects(country?: string, projectCategoryId?: string, type?: string, vintage?: number, currency?: string, lng?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Project>>> {
        return ProjectsApiFp(this.configuration).getProjects(country, projectCategoryId, type, vintage, currency, lng, options).then((request) => request(this.axios, this.basePath));
    }
}
